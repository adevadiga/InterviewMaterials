<ClassNotFoundException>
  Thrown when an application tries to load in a class through its String name using
   >forName method in class Class
   >findSystemClass method in class ClassLoader
   >loadClass method in class ClassLoader
  But no definition for the class with the specified name could not be found.
  
 <NoClassDefFoundError>
  Thrown if the Java Virtual Machine or a ClassLoader instance tries to load in the definition of a class (as part of a normal method call or as part of creating a new instance using the new expression) and no definition of the class could be found.
  
  The searched-for class definition existed when the currently executing class was compiled, but the definition can no longer be found.

  The difference between two is that one is an <Error>(LinkageError) and other an <Exception>.
  NoClassDefFoundError is an Error and it arises from the Java Virtual Machine having problems finding a class it expected to find.
  A program that was expected to work at compile-time can't run because of class files not being found, or is not the same as was produced or encountered at compile-time. 
  
  If the class is not initialized successfully then NoClassDefFoundError will be thrown, when we try to access it.
  There was an exception thrown in static block or static fields initialization of the class.
  
======================================================
< Class Loading>

Class or interface creation is triggered by another class or interface D, which references C through its run-time constant pool.
Class or interface creation may also be triggered by D invoking methods in certain Java SE platform class libraries such as reflection.

There are two kinds of class loaders: BootStrap class loader supplied by JVM, user defined class loader.
User defined class loaders are subclass of abstract class ClassLoader.
A class loader L may create C by defining it directly or by delegating to another class loader.
If L creates C, either by defining it directly or by delegation, we say that L initiates loading of C.

At run time, a class or interface is determined not by its name alone, but by a pair: its binary name and its defining class loader.
Array class was loaded bu JVM itself and not by clasdLoader. They don't have binary representation.

JVM uses one of 3 procedures
>If D was defined by the bootstrap class loader, then the bootstrap class loader initiates loading of C.
>If D was defined by a user-defined class loader, then that same user-defined class loader initiates loading of C.
>Array class by JVM

If an error occurs during class loading a linkage error is thrown at point of usage.

<If JVM ever attempts to load class C during verification or resolution( but not initilization) and
the class loader that is used to initiate loading of C, throws an instance of ClassNotFoundException,
JVM must throw NoClassDefFoundError whose cause is ClassNotFoundException>.

<Verification>: ensures that binary representation of class or interface is structurally correct. If not valid VerifyError of type LinkageError will be thrown.
Subsequent verification will always fail with same error as result of initial attempt.

<Initilization>:Initialization of a class or interface consists of executing its class or interface initialization method.
>If the Class object for C is in an erroneous state, then initialization is not possible. Release LC and throw a NoClassDefFoundError.


============================================================
ClassNotFoundException
  >Class missing from classpath
  >Class in question is trying to loaded from another class which was loaded by different classloader (visibility problem in classloader hierarchy).
  
============================================================
9)What are the Java Class-loader? java.lang.ClassLoder
=>The Java Classloader is a part of the Java Runtime Environment that dynamically loads Java classes into the Java Virtual Machine.
The Java run time system does not need to know about files and file systems because of classloader.
A class with a given name can only be loaded once by a given classloader.

When the JVM is started, three class loaders are used:
1. Bootstrap class loader
2. Extensions class loader
3. System(Application) class loader

The bootstrap class loader loads the core Java libraries[5] located in the <JAVA_HOME>/jre/lib directory. This class loader, which is part of the core JVM, is written in native code.
The extensions class loader loads the code in the extensions directories (<JAVA_HOME>/jre/lib/ext,[6] or any other directory specified by the java.ext.dirs system property). It is implemented by the sun.misc.Launcher$ExtClassLoader class.
The system class loader loads code found on java.class.path, which maps to the CLASSPATH environment variable. This is implemented by the sun.misc.Launcher$AppClassLoader class.