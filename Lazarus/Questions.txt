1. Is SessionFactory is thread safe?
=>Yes. The internal state of a SessionFactory is immutable.
This internal state includes all of the metadata about Object/Relational Mapping.

The main contract here is the creation of Session instances. Usually an application has a single SessionFactory instance and threads servicing client requests obtain Session instances from this factory.

 >caches configuration settings (immutably)
 >caches "compiled" mappings ie. EntityPersisters and CollectionPersisters (immutable)
 >caches "compiled" queries (memory sensitive cache)
 >manages PreparedStatements
 >delegates JDBC Connection management to the ConnectionProvider
 >factory for instances of SessionImpl
This class must appear immutable to clients, even if it does all kinds of caching and pooling under the covers. It is crucial that the class is not only thread safe, but also highly concurrent. Synchronization must be used extremely sparingly.

 As these objects are heavy weight because they contains the connection information, hibernate configuration information and mapping files,location path. 
 Hence it would be one SessionFactory per DataSource.
 
 Because creation of a SessionFactory is an extremely expensive process which involves parsing hibernate configuration/mapping properties and creating database connection pool .Creating a database connection pool requires establishing database connections (i.e creating Connection objects) which has overhead due to the time taken to locate the DB server , establish a communication channel and exchange information to do authentication.
==========================================
2.