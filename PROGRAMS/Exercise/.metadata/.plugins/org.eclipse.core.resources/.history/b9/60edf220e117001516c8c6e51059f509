package com.workbook.worksheet;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class MaximumRepeatedWordsFromFile2 {
	
	public void printMaxWords(String fileName){
		Map<String, Integer> wordsInFile = getWordCount(fileName);
		List<Map.Entry<String, Integer>> wordsAndCountSortedList = sortByValue(wordsInFile);
		for(Map.Entry<String, Integer> entry:wordsAndCountSortedList){
			System.out.println(entry.getKey()+" =>"+entry.getValue());
		}
	}

	public Map<String, Integer> getWordCount(String fileName){
		Map<String,Integer> wordsAndCountMap = new HashMap<String,Integer>();
		BufferedReader br = null;
		FileInputStream fi = null;
		DataInputStream ds = null;
		try{
		fi = new FileInputStream(fileName);
		ds = new DataInputStream(fi);
		
		br = new BufferedReader(new InputStreamReader(ds));
		String line = null;
		while( (line = br.readLine()) != null){
			String[] words = line.split("\\s+");
			for(String word : words){
				wordsAndCountMap.put(word, wordsAndCountMap.get(word)==null?1:wordsAndCountMap.get(word)+1);
			}
			
		}
		
		}catch(FileNotFoundException fnfe){
			
		}catch(IOException ioe){
			
		}
		finally{
			try {
				br.close();
				ds.close();
				fi.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return wordsAndCountMap;
	}
	
	public List<Map.Entry<String, Integer>> sortByValue(Map<String,Integer> wordsAndCountMap){
		
		Set<Map.Entry<String, Integer>> valueSet = wordsAndCountMap.entrySet();
		List<Map.Entry<String, Integer>> sortedWords = new ArrayList<Map.Entry<String, Integer>>(valueSet);
		
		Collections.sort(sortedWords, new Comparator<Map.Entry<String, Integer>>() {

			@Override
			public int compare(Entry<String, Integer> o1,
					Entry<String, Integer> o2) {
				return o2.getValue().compareTo(o1.getValue());
			}
		});
		return sortedWords;
	}
	
	
	public void readFileEffiecient(BufferedReader br){
	   StringBuilder sb = null;
	   String delimeter = " .\t";
	   char[] buffer = new char[1024];
	   try{
		   while(br.read(buffer) != -1){
			   for(char ch: buffer){
				   if(delimeter.indexOf(ch) < 0){
					   if(sb == null) new StringBuffer(sb)
					   
				   }
				   
			   }
		   }
	   }catch(IOException ioe){
		   
	   }
	}
}
